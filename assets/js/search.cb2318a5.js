(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{285:function(t,i,e){"use strict";e.r(i),i.default=[{title:"js笔记",path:"/posts/js.html",strippedContent:" # JavaScript（简称“JS”）         是一种具有[函数](https://baike.baidu.com/item/函数/301912)优先的轻量级，解释型或即时编译型的[编程语言](https://baike.baidu.com/item/编程语言/9845131)。虽然它是作为开发Web页面的[脚本语言](https://baike.baidu.com/item/脚本语言/1379708)而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持[面向对象](https://baike.baidu.com/item/面向对象/2262089)、命令式和声明式（如[函数式编程](https://baike.baidu.com/item/函数式编程/4035031)）风格。    JavaScript在1995年由[Netscape](https://baike.baidu.com/item/Netscape)公司的[Brendan Eich](https://baike.baidu.com/item/Brendan Eich)，在[网景导航者](https://baike.baidu.com/item/网景导航者/10404300)浏览器上首次设计实现而成。因为[Netscape](https://baike.baidu.com/item/Netscape)与[Sun](https://baike.baidu.com/item/Sun/69463)合作，[Netscape](https://baike.baidu.com/item/Netscape)管理层希望它外观看起来像[Java](https://baike.baidu.com/item/Java/85979)，因此取名为JavaScript。但实际上它的语法风格与[Self](https://baike.baidu.com/item/Self/4959923)及[Scheme](https://baike.baidu.com/item/Scheme)较为接近。    JavaScript的标准是[ECMAScript](https://baike.baidu.com/item/ECMAScript/1889420) 。截至 2012 年，所有[浏览器](https://baike.baidu.com/item/浏览器/213911)都完整的支持ECMAScript 5.1，旧版本的浏览器至少支持ECMAScript 3 标准。2015年6月17日，ECMA国际组织发布了ECMAScript 的第六版，该版本正式名称为 ECMAScript 2015，但通常被称为ECMAScript 6 或者ES6。    # 基本特点    JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。    1. 是一种解释性脚本语言（代码不进行[预编译](https://baike.baidu.com/item/预编译)）。   2. 主要用来向[HTML](https://baike.baidu.com/item/HTML)（[标准通用标记语言](https://baike.baidu.com/item/标准通用标记语言)下的一个应用）页面添加交互行为。 [6]   3. 可以直接嵌入HTML页面，但写成单独的[js](https://baike.baidu.com/item/js/10687961)文件有利于结构和行为的[分离](https://baike.baidu.com/item/分离)。 [6]   4. 跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如[Windows](https://baike.baidu.com/item/Windows)、[Linux](https://baike.baidu.com/item/Linux)、[Mac](https://baike.baidu.com/item/Mac/173)、[Android](https://baike.baidu.com/item/Android/60243)、[iOS](https://baike.baidu.com/item/iOS/45705)等）。  5. Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。    # 日常用途：    1.编辑    2.嵌入动态文本于HTML页面。    3.对浏览器事件做出响应。     4.读写HTML元素。    5.在数据被提交到服务器之前验证数据。     6.检测访客的浏览器信息。     7.控制cookies，包括创建和修改等。     8.基于Node.js技术进行服务器端编程。        JavaScript脚本语言具有以下特点:        (1)[脚本语言](https://baike.baidu.com/item/脚本语言)。JavaScript是一种解释型的脚本语言,C、[C++](https://baike.baidu.com/item/C%2B%2B)等语言先[编译](https://baike.baidu.com/item/编译)后执行,而JavaScript是在程序的运行过程中逐行进行解释。        (2)基于对象。JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也能使用现有的对象。        (3)简单。JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做出严格的要求,是基于Java基本语句和控制的脚本语言,其设计简单紧凑。        (4)动态性。JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务器就可以对用户的输入做出响应。在访问一个网页时,鼠标在网页中进行鼠标点击或上下移、窗口移动等操作JavaScript都可直接对这些事件给出相应的响应。        (5)跨平台性。JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用,前提上机器上的浏览器支 持JavaScript脚本语言,JavaScript已被大多数的浏览器所支持。 [5]         不同于服务器端脚本语言，例如[PHP](https://baike.baidu.com/item/PHP/9337)与[ASP](https://baike.baidu.com/item/ASP/128906)，JavaScript主要被作为客户端脚本语言在用户的浏览器上运行，不需要服务器的支持。所以在早期程序员比较青睐于JavaScript以减少对服务器的负担，而与此同时也带来另一个问题：安全性。        而随着服务器的强壮，虽然程序员更喜欢运行于服务端的脚本以保证安全，但JavaScript仍然以其跨平台、容易上手等优势大行其道。同时，有些特殊功能（如[AJAX](https://baike.baidu.com/item/AJAX/8425)）必须依赖Javascript在客户端进行支持。随着引擎如V8和框架如[Node.js](https://baike.baidu.com/item/Node.js)的发展，及其事件驱动及[异步IO](https://baike.baidu.com/item/异步IO)等特性，JavaScript逐渐被用来编写服务器端程序。"},{title:"实训内容",path:"/posts/%E5%AE%9E%E8%AE%AD.html",strippedContent:" ### 实训第一天    1.安装  \tnode.js  2.安装  \ttypora  3安装\tjquery  4注册\tgithub  5学习\tgithub菜鸟教程  网站\thttps://www.runoob.com/git/git-tutorial.html  ctrl+/   查看源码  ctrl+n   新建一个文本网页  有序是  1 . 空格  无需是  *   空格  代码敲完后必须按 空格  保存文件后缀名必须是md    2019年12月24日  实训第二天  1.安装     git  2创建一个存储库名称  3创建一个文件夹,在文件夹里面鼠标右级打开git bash here  4 输入 git clone 加 存储库名称   5输入 git status \t（粘贴别人地址）  6输入 git add .\t（检查状态）  7输入 git commit -m'随便写什么'\t（提交版本库）  8输入 git push (上传)    ### 实训第三天    1.c盘 输入cmd  2.在里面输入npm -v  3打开淘宝nom镜像 找到使用说明npm install -g cnpm --registry=https://registry.npm.taobao.org  4刷出来以后 打cnpm -v  5在输入一个 cnpm install -g @vue/cli  6 输入一个 vue -V  7输入一个 cnpm i -g vuepress  8百度  vuepress  9创建工作文件夹 命名必须是README.md英文  10创建 文本文档 命名 md  11cmd命令打开文件夹  12输入vuepress dev .  13 粘贴网站名字 打开他就ok了。    ### 实训第四天    1.桌面创建一个文件夹命名为vue press  2.进入后点右件git bash here  3.百度 liujiaozhu666GitHub.io  4.找到 indigo material点击  5.找到使用模板分支   复制下载分支的命令  6.出来一个文件夹后进入文件夹  7进入文件夹后 点击init.sh  8.再次运行在文件夹输入cmd在里面输入 npm run dev  9.如果代码出错删除no什么，在次点击cmd在他里面输入cnpm 空格 i  9.完成后复制网站名称，在网页打开他  10.将文件夹拖到软件中开始编辑    ### 实训第五天    1.在文件夹vue press中找到posts文件夹  2.找到posts文件夹后在里面创建一个文本文档后缀名必须是md  3.在md文本文档中输入：  title: （标题）  date: （时间，日期）  ags:  [标题]  4.在文件夹中输入cmd，cmd中输入npm run dev  5.复制链接在浏览器中打开  6.在百度上输入github进入官网找到克隆或下载复制链接  7.在软件中修改第一行 前面加一个#，然后把后两行代码删除，在修改链接  8.在文件夹cmd输入 npm run build ,完成  9.双击文件夹中 deploy.sh  10.打开github官网看是否上传成功"},{title:"css笔记",path:"/posts/css.html",strippedContent:" ### **层叠样式表**     (Cascading Style Sheets，缩写为 **CSS**），是一种 [样式表](https://developer.mozilla.org/zh-CN/docs/DOM/stylesheet) 语言，用来描述 [HTML](https://developer.mozilla.org/zh-CN/docs/HTML) 或 [XML](https://developer.mozilla.org/zh-CN/docs/XML_介绍)（包括如 [SVG](https://developer.mozilla.org/zh-CN/docs/SVG)、[MathML](https://developer.mozilla.org/zh-CN/docs/Web/MathML)、[XHTML](https://developer.mozilla.org/zh-CN/docs/XHTML) 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。    CSS 是**开放网络**的核心语言之一，由 [W3C 规范](http://w3.org/Style/CSS/#specs) 实现跨浏览器的标准化。CSS节省了大量的工作。 样式可以通过定义保存在外部.css文件中，同时控制多个网页的布局，这意味着开发者不必经历在所有网页上编辑布局的麻烦。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准， [CSS3](https://developer.mozilla.org/zh-CN/docs/CSS/CSS3) 分成多个小模块且正在标准化中。    ### [CSS 介绍]     本模块带领你从 CSS 如何工作的基础知识进行入门，具体包括：选择器和属性，编写 CSS 规则，将 CSS 应用于 HTML，如何在 CSS 中规范长度、颜色和其他单位，层叠和继承，盒模型基础，以及调试 CSS。         ### [ 样式化文本]     这里我们将会看到文本格式化的基础，具体包括：设置字体、粗细和倾斜，行和字符间距，以及阴影和其他文本特性。我们通过研究在个人页面上应用自定义字体，并样式化列表和链接的方式完善本模块。         ### [样式化盒子]     接下来，我们将会看到样式化盒子，它是向着构建网页布局方向前进的基础步骤之一。在本模块，我们概括了盒子模型，然后研究通过在盒中应用这些方式控制盒布局：设置内边距、边框、外边距，设置自定义背景颜色、图片和其他特性，以及诸如阴影、过滤器之类的高级特性。         ### [CSS 布局]     到这里，我们已经了解了 CSS 基础：如何样式化文本，以及如何样式化和操作内置个人内容的盒模型。现在是时候研究“如何相对于可视区域将你的盒子彼此间放置于正确位置”了。我们到此已经覆盖了所有预备知识，因此现在能够深入学习 CSS 布局，研究不同的显示设置，包括浮动和定位在内的传统布局方法，以及像如弹性盒（flexbox）之类新近流行的布局工具。"}]}}]);